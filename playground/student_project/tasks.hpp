#pragma once

#include <iostream>
#include <limits>
#include <random>
#include <cassert>

#include "profiling.hpp"

using namespace std;
using namespace mondrian::query_engine::operators;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Task 1
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

default_random_engine generator;

int random_number(int lower_bound = numeric_limits<int>::min(), int upper_bound = numeric_limits<int>::max())
{
    static uniform_int_distribution<int> distribution(lower_bound, upper_bound);
    return distribution(generator);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Task 2
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int *create_column(unsigned long num_of_elements, bool fill_with_random = true, bool fill = true)
{
    assert (num_of_elements > 0);
    auto result = (int *) malloc (num_of_elements * sizeof(int));
    if (fill) {
        for (auto i = 0; i < num_of_elements; ++i)
            result[i] = fill_with_random ? random_number() : i;
    }
    return result;
}

void delete_column(int *column)
{
    assert (column != nullptr);
    free (column);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Task 7
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


